Object oriented programming using Java
Lesson 5. Packages and interfaces

Packages
Packages are groups of related classes. Packages help organize your code and provide another layer of encapsulation.


Defining a package
All classes in Java belong to some package. When no package statement is specified, the default (global) package is used.
To create a package, put a package command at the top of a Java source file. The classes declared within that file will then belong to the specified package. The general form of the package statement is:
    package pkg;


Java uses the file system to manage packages, with each package stored in its own directory.


Package names are case sensitive. This means that the directory in which a package is stored must be precisely the same as the package name.


You can create a hierarchy of packages. The general form of a multileveled package statement is:
    package pack1.pack2.pack3...packN;
You also must create directories that support the package hierarchy that you create. For example,
    package alpha.beta.gamma;
must be stored in alpha/beta/gamma


Finding packages and CLASSPATH
Such as packages are mirrored by directories. This raises an important question: How does the Java run-time system know where to look for packages that you create? The answer has  three parts:
First, by default, Java run-time system uses the current working directory as its starting point.
Second, you can specify a directory path by setting the CLASSPATH environmental variable.
Third, you can use the -classpath option with java and javac to specify the path to your classes.
Beginning with JDK 9, a package can be part of a module, and thus found on the module path. However, a discussion of modules and module paths is deferred. For now we will use only class paths.


A short example
Put BookDemo.java in a directory called bookpack.
Next, compile the file using the following command:
    javac bookpack/BookDemo.java

Then try executing the class, using the following command line:
    java bookpack.BookDemo

Remember, you will need to be in the directory above bookpack or you will have to specify the class paths. BookDemo and Book are now part of the package bookpack. you cannot use the command line:
    java BookDemo


Packages and member access
The visibility of an element is determined by its visibility within a class and its visibility within a package.
    visibility.png


A Package access example
To make the class Book from BookDemo.java (in the previous example) available to other packages, there are several changes should be made:
First, Book needs to be declared public.
Second, its constructor must be made public, and finally, its show() method needs to be public.
    UseBook.java
To compile and run:
    javac bookpackext/UseBook.java
    java bookpackext.UseBook


Protected members
The protected modifier creates a member that is accessible within its package and to subclassess in other packages. Thus, a protected member is available for all subclasses to use but is still protected from access by other code outside its package.
    ProtectedDemo


Import packages
When you use a class from another package, you can fully qualify the name of the class with the name of its package, or you can bring it into view by import before using it. The general form of the import statement:
    import pkg.classname;

You can use an asterisk(*) for the class name if you want to import the entire contents of a package.


Interfaces
An interface defines a set of methods that will be implemented by a class. Thus, an interface gives you a way to specify what a class will do, but not how it will do it.
The general form of a classic interface is:
    access interface name {
      ret-type method-name1(parameter-list);
      ret-type method-name2(parameter-list);
      type var1 = value;
      type var2 = value;
    }
Interface methods are declared using only their return type and signature. They are, essentially, abstract methods. In an interface, methods are implicitly public.
Variables declared in an interface are not instance variable. Instead they are implicitly public, final, and static and must be initialized.
From JDK 8, it is possible to add a default implementation to an interface method.
Beginning with JDK 9, an interface can also include private methods.


Implementing interface
To implement an interface, includes the implements clause in a class definition and then create the methods required by the interface. The general form of implements looks like this:
    class classname extends superclass implements interface {
        // class-body
    }
The extends clause is optional. The methods that implement an interface must be declared public.
    SeriesDemo.java


Using interface references
You can declare a reference variable of an interface type. When you call a method on an object through an interface reference, it is the version of the method implemented by the object that is executed.
    InterfaceReference.java


Extends an interface
One interface can inherit another by use of the keyword extends.


Default interface method
It is not necessary for an implementing class to override a default interface method.
    DefaultMethodDemo.java


Multiple inheritance issues
To overcome the problem with multiple inheritance, Java defines the following set of rules:
First, in all cases a class implementation takes priority over an interface default implementation.
Second, in cases a class inherits two interfaces that both have the same default method, if the class does not override that method, then an error will result.
In cases in which one interface inherits another, with both defining a common default method, the inheriting interface's version of the method takes precedence.
It is possible to refer to a default implementation using super. The general form is:
    InterfaceName.super.methodName()


Static methods in an interface
JDK 8 added the ability to define static methods in interface, like static methods in class.
static interface methods are not inherited by either an implementing class or a subinterface.
    IStaticDemo.java